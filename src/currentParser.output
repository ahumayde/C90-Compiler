Terminals unused in grammar

    SIZEOF
    PTR_OP
    INC_OP
    DEC_OP
    LEFT_OP
    RIGHT_OP
    LE_OP
    GE_OP
    EQ_OP
    NE_OP
    AND_OP
    OR_OP
    MUL_ASSIGN
    DIV_ASSIGN
    MOD_ASSIGN
    ADD_ASSIGN
    SUB_ASSIGN
    LEFT_ASSIGN
    RIGHT_ASSIGN
    AND_ASSIGN
    XOR_ASSIGN
    OR_ASSIGN
    TYPEDEF
    EXTERN
    STATIC
    AUTO
    REGISTER
    CONST
    VOLATILE
    STRUCT
    UNION
    ENUM
    ELLIPSIS
    CASE
    DEFAULT
    IF
    ELSE
    SWITCH
    WHILE
    DO
    FOR
    GOTO
    CONTINUE
    BREAK


Grammar

    0 $accept: ROOT $end

    1 ROOT: translation_unit

    2 translation_unit: external_declaration
    3                 | declaration

    4 external_declaration: function_definition

    5 declaration: declaration_specifiers ';'
    6            | declaration_specifiers init_declarator_list ';'

    7 init_declarator_list: init_declarator
    8                     | init_declarator_list ',' init_declarator

    9 init_declarator: declarator
   10                | declarator '=' primary_expression

   11 function_definition: declaration_specifiers declarator compound_statement
   12                    | expression ';'
   13                    | jump_statement

   14 declaration_specifiers: type_specifier

   15 type_specifier: VOID
   16               | CHAR
   17               | SHORT
   18               | INT
   19               | LONG
   20               | FLOAT
   21               | DOUBLE
   22               | SIGNED
   23               | UNSIGNED
   24               | TYPE_NAME

   25 declarator: direct_declarator

   26 direct_declarator: IDENTIFIER
   27                  | '(' declarator ')'
   28                  | direct_declarator '(' ')'

   29 compound_statement: '{' '}'
   30                   | '{' statement_list '}'

   31 statement_list: statement
   32               | statement_list statement

   33 statement: jump_statement

   34 jump_statement: RETURN expression ';'

   35 expression: primary_expression

   36 primary_expression: IDENTIFIER
   37                   | CONSTANT
   38                   | STRING_LITERAL
   39                   | '(' expression ')'


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 27 28 39
    ')' (41) 27 28 39
    ',' (44) 8
    ';' (59) 5 6 12 34
    '=' (61) 10
    '{' (123) 29 30
    '}' (125) 29 30
    error (256)
    SIZEOF (258)
    PTR_OP (259)
    INC_OP (260)
    DEC_OP (261)
    LEFT_OP (262)
    RIGHT_OP (263)
    LE_OP (264)
    GE_OP (265)
    EQ_OP (266)
    NE_OP (267)
    AND_OP (268)
    OR_OP (269)
    MUL_ASSIGN (270)
    DIV_ASSIGN (271)
    MOD_ASSIGN (272)
    ADD_ASSIGN (273)
    SUB_ASSIGN (274)
    LEFT_ASSIGN (275)
    RIGHT_ASSIGN (276)
    AND_ASSIGN (277)
    XOR_ASSIGN (278)
    OR_ASSIGN (279)
    TYPEDEF (280)
    EXTERN (281)
    STATIC (282)
    AUTO (283)
    REGISTER (284)
    CONST (285)
    VOLATILE (286)
    STRUCT (287)
    UNION (288)
    ENUM (289)
    ELLIPSIS (290)
    CASE (291)
    DEFAULT (292)
    IF (293)
    ELSE (294)
    SWITCH (295)
    WHILE (296)
    DO (297)
    FOR (298)
    GOTO (299)
    CONTINUE (300)
    BREAK (301)
    IDENTIFIER <string> (302) 26 36
    CONSTANT <string> (303) 37
    STRING_LITERAL <string> (304) 38
    CHAR <string> (305) 16
    SHORT <string> (306) 17
    INT <string> (307) 18
    LONG <string> (308) 19
    SIGNED <string> (309) 22
    UNSIGNED <string> (310) 23
    FLOAT <string> (311) 20
    DOUBLE <string> (312) 21
    VOID <string> (313) 15
    TYPE_NAME <string> (314) 24
    RETURN (315) 34


Nonterminals, with rules where they appear

    $accept (68)
        on left: 0
    ROOT (69)
        on left: 1
        on right: 0
    translation_unit <block> (70)
        on left: 2 3
        on right: 1
    external_declaration <block> (71)
        on left: 4
        on right: 2
    declaration <block> (72)
        on left: 5 6
        on right: 3
    init_declarator_list <block> (73)
        on left: 7 8
        on right: 6 8
    init_declarator <block> (74)
        on left: 9 10
        on right: 7 8
    function_definition <block> (75)
        on left: 11 12 13
        on right: 4
    declaration_specifiers <string> (76)
        on left: 14
        on right: 5 6 11
    type_specifier <string> (77)
        on left: 15 16 17 18 19 20 21 22 23 24
        on right: 14
    declarator <block> (78)
        on left: 25
        on right: 9 10 11 27
    direct_declarator <block> (79)
        on left: 26 27 28
        on right: 25 28
    compound_statement <block> (80)
        on left: 29 30
        on right: 11
    statement_list <block> (81)
        on left: 31 32
        on right: 30 32
    statement <block> (82)
        on left: 33
        on right: 31 32
    jump_statement <block> (83)
        on left: 34
        on right: 13 33
    expression <block> (84)
        on left: 35
        on right: 12 34 39
    primary_expression <block> (85)
        on left: 36 37 38 39
        on right: 10 35


State 0

    0 $accept: . ROOT $end

    IDENTIFIER      shift, and go to state 1
    CONSTANT        shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    CHAR            shift, and go to state 4
    SHORT           shift, and go to state 5
    INT             shift, and go to state 6
    LONG            shift, and go to state 7
    SIGNED          shift, and go to state 8
    UNSIGNED        shift, and go to state 9
    FLOAT           shift, and go to state 10
    DOUBLE          shift, and go to state 11
    VOID            shift, and go to state 12
    TYPE_NAME       shift, and go to state 13
    RETURN          shift, and go to state 14
    '('             shift, and go to state 15

    ROOT                    go to state 16
    translation_unit        go to state 17
    external_declaration    go to state 18
    declaration             go to state 19
    function_definition     go to state 20
    declaration_specifiers  go to state 21
    type_specifier          go to state 22
    jump_statement          go to state 23
    expression              go to state 24
    primary_expression      go to state 25


State 1

   36 primary_expression: IDENTIFIER .

    $default  reduce using rule 36 (primary_expression)


State 2

   37 primary_expression: CONSTANT .

    $default  reduce using rule 37 (primary_expression)


State 3

   38 primary_expression: STRING_LITERAL .

    $default  reduce using rule 38 (primary_expression)


State 4

   16 type_specifier: CHAR .

    $default  reduce using rule 16 (type_specifier)


State 5

   17 type_specifier: SHORT .

    $default  reduce using rule 17 (type_specifier)


State 6

   18 type_specifier: INT .

    $default  reduce using rule 18 (type_specifier)


State 7

   19 type_specifier: LONG .

    $default  reduce using rule 19 (type_specifier)


State 8

   22 type_specifier: SIGNED .

    $default  reduce using rule 22 (type_specifier)


State 9

   23 type_specifier: UNSIGNED .

    $default  reduce using rule 23 (type_specifier)


State 10

   20 type_specifier: FLOAT .

    $default  reduce using rule 20 (type_specifier)


State 11

   21 type_specifier: DOUBLE .

    $default  reduce using rule 21 (type_specifier)


State 12

   15 type_specifier: VOID .

    $default  reduce using rule 15 (type_specifier)


State 13

   24 type_specifier: TYPE_NAME .

    $default  reduce using rule 24 (type_specifier)


State 14

   34 jump_statement: RETURN . expression ';'

    IDENTIFIER      shift, and go to state 1
    CONSTANT        shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    '('             shift, and go to state 15

    expression          go to state 26
    primary_expression  go to state 25


State 15

   39 primary_expression: '(' . expression ')'

    IDENTIFIER      shift, and go to state 1
    CONSTANT        shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    '('             shift, and go to state 15

    expression          go to state 27
    primary_expression  go to state 25


State 16

    0 $accept: ROOT . $end

    $end  shift, and go to state 28


State 17

    1 ROOT: translation_unit .

    $default  reduce using rule 1 (ROOT)


State 18

    2 translation_unit: external_declaration .

    $default  reduce using rule 2 (translation_unit)


State 19

    3 translation_unit: declaration .

    $default  reduce using rule 3 (translation_unit)


State 20

    4 external_declaration: function_definition .

    $default  reduce using rule 4 (external_declaration)


State 21

    5 declaration: declaration_specifiers . ';'
    6            | declaration_specifiers . init_declarator_list ';'
   11 function_definition: declaration_specifiers . declarator compound_statement

    IDENTIFIER  shift, and go to state 29
    ';'         shift, and go to state 30
    '('         shift, and go to state 31

    init_declarator_list  go to state 32
    init_declarator       go to state 33
    declarator            go to state 34
    direct_declarator     go to state 35


State 22

   14 declaration_specifiers: type_specifier .

    $default  reduce using rule 14 (declaration_specifiers)


State 23

   13 function_definition: jump_statement .

    $default  reduce using rule 13 (function_definition)


State 24

   12 function_definition: expression . ';'

    ';'  shift, and go to state 36


State 25

   35 expression: primary_expression .

    $default  reduce using rule 35 (expression)


State 26

   34 jump_statement: RETURN expression . ';'

    ';'  shift, and go to state 37


State 27

   39 primary_expression: '(' expression . ')'

    ')'  shift, and go to state 38


State 28

    0 $accept: ROOT $end .

    $default  accept


State 29

   26 direct_declarator: IDENTIFIER .

    $default  reduce using rule 26 (direct_declarator)


State 30

    5 declaration: declaration_specifiers ';' .

    $default  reduce using rule 5 (declaration)


State 31

   27 direct_declarator: '(' . declarator ')'

    IDENTIFIER  shift, and go to state 29
    '('         shift, and go to state 31

    declarator         go to state 39
    direct_declarator  go to state 35


State 32

    6 declaration: declaration_specifiers init_declarator_list . ';'
    8 init_declarator_list: init_declarator_list . ',' init_declarator

    ';'  shift, and go to state 40
    ','  shift, and go to state 41


State 33

    7 init_declarator_list: init_declarator .

    $default  reduce using rule 7 (init_declarator_list)


State 34

    9 init_declarator: declarator .
   10                | declarator . '=' primary_expression
   11 function_definition: declaration_specifiers declarator . compound_statement

    '='  shift, and go to state 42
    '{'  shift, and go to state 43

    $default  reduce using rule 9 (init_declarator)

    compound_statement  go to state 44


State 35

   25 declarator: direct_declarator .
   28 direct_declarator: direct_declarator . '(' ')'

    '('  shift, and go to state 45

    $default  reduce using rule 25 (declarator)


State 36

   12 function_definition: expression ';' .

    $default  reduce using rule 12 (function_definition)


State 37

   34 jump_statement: RETURN expression ';' .

    $default  reduce using rule 34 (jump_statement)


State 38

   39 primary_expression: '(' expression ')' .

    $default  reduce using rule 39 (primary_expression)


State 39

   27 direct_declarator: '(' declarator . ')'

    ')'  shift, and go to state 46


State 40

    6 declaration: declaration_specifiers init_declarator_list ';' .

    $default  reduce using rule 6 (declaration)


State 41

    8 init_declarator_list: init_declarator_list ',' . init_declarator

    IDENTIFIER  shift, and go to state 29
    '('         shift, and go to state 31

    init_declarator    go to state 47
    declarator         go to state 48
    direct_declarator  go to state 35


State 42

   10 init_declarator: declarator '=' . primary_expression

    IDENTIFIER      shift, and go to state 1
    CONSTANT        shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    '('             shift, and go to state 15

    primary_expression  go to state 49


State 43

   29 compound_statement: '{' . '}'
   30                   | '{' . statement_list '}'

    RETURN  shift, and go to state 14
    '}'     shift, and go to state 50

    statement_list  go to state 51
    statement       go to state 52
    jump_statement  go to state 53


State 44

   11 function_definition: declaration_specifiers declarator compound_statement .

    $default  reduce using rule 11 (function_definition)


State 45

   28 direct_declarator: direct_declarator '(' . ')'

    ')'  shift, and go to state 54


State 46

   27 direct_declarator: '(' declarator ')' .

    $default  reduce using rule 27 (direct_declarator)


State 47

    8 init_declarator_list: init_declarator_list ',' init_declarator .

    $default  reduce using rule 8 (init_declarator_list)


State 48

    9 init_declarator: declarator .
   10                | declarator . '=' primary_expression

    '='  shift, and go to state 42

    $default  reduce using rule 9 (init_declarator)


State 49

   10 init_declarator: declarator '=' primary_expression .

    $default  reduce using rule 10 (init_declarator)


State 50

   29 compound_statement: '{' '}' .

    $default  reduce using rule 29 (compound_statement)


State 51

   30 compound_statement: '{' statement_list . '}'
   32 statement_list: statement_list . statement

    RETURN  shift, and go to state 14
    '}'     shift, and go to state 55

    statement       go to state 56
    jump_statement  go to state 53


State 52

   31 statement_list: statement .

    $default  reduce using rule 31 (statement_list)


State 53

   33 statement: jump_statement .

    $default  reduce using rule 33 (statement)


State 54

   28 direct_declarator: direct_declarator '(' ')' .

    $default  reduce using rule 28 (direct_declarator)


State 55

   30 compound_statement: '{' statement_list '}' .

    $default  reduce using rule 30 (compound_statement)


State 56

   32 statement_list: statement_list statement .

    $default  reduce using rule 32 (statement_list)
