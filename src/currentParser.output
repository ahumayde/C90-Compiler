Terminals unused in grammar

    SIZEOF
    PTR_OP
    INC_OP
    DEC_OP
    LEFT_OP
    RIGHT_OP
    LE_OP
    GE_OP
    EQ_OP
    NE_OP
    AND_OP
    OR_OP
    MUL_ASSIGN
    DIV_ASSIGN
    MOD_ASSIGN
    ADD_ASSIGN
    SUB_ASSIGN
    LEFT_ASSIGN
    RIGHT_ASSIGN
    AND_ASSIGN
    XOR_ASSIGN
    OR_ASSIGN
    TYPEDEF
    EXTERN
    STATIC
    AUTO
    REGISTER
    CONST
    VOLATILE
    STRUCT
    UNION
    ENUM
    ELLIPSIS
    CASE
    DEFAULT
    IF
    ELSE
    SWITCH
    WHILE
    DO
    FOR
    GOTO
    CONTINUE
    BREAK


Grammar

    0 $accept: ROOT $end

    1 ROOT: translation_unit

    2 translation_unit: external_declaration
    3                 | declaration

    4 external_declaration: function_definition

    5 declaration: declaration_specifiers init_declarator ';'

    6 init_declarator: declarator
    7                | declarator '=' primary_expression

    8 function_definition: declaration_specifiers declarator compound_statement
    9                    | expression ';'
   10                    | jump_statement

   11 declaration_specifiers: type_specifier

   12 type_specifier: VOID
   13               | CHAR
   14               | SHORT
   15               | INT
   16               | LONG
   17               | FLOAT
   18               | DOUBLE
   19               | SIGNED
   20               | UNSIGNED
   21               | TYPE_NAME

   22 declarator: direct_declarator

   23 direct_declarator: IDENTIFIER
   24                  | '(' declarator ')'
   25                  | direct_declarator '(' ')'

   26 compound_statement: '{' '}'
   27                   | '{' statement_list '}'
   28                   | '{' declaration statement_list '}'

   29 statement_list: statement
   30               | statement_list statement

   31 statement: jump_statement
   32          | compound_statement

   33 jump_statement: RETURN expression ';'

   34 expression: primary_expression

   35 primary_expression: IDENTIFIER
   36                   | CONSTANT
   37                   | STRING_LITERAL
   38                   | '(' expression ')'


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 24 25 38
    ')' (41) 24 25 38
    ';' (59) 5 9 33
    '=' (61) 7
    '{' (123) 26 27 28
    '}' (125) 26 27 28
    error (256)
    SIZEOF (258)
    PTR_OP (259)
    INC_OP (260)
    DEC_OP (261)
    LEFT_OP (262)
    RIGHT_OP (263)
    LE_OP (264)
    GE_OP (265)
    EQ_OP (266)
    NE_OP (267)
    AND_OP (268)
    OR_OP (269)
    MUL_ASSIGN (270)
    DIV_ASSIGN (271)
    MOD_ASSIGN (272)
    ADD_ASSIGN (273)
    SUB_ASSIGN (274)
    LEFT_ASSIGN (275)
    RIGHT_ASSIGN (276)
    AND_ASSIGN (277)
    XOR_ASSIGN (278)
    OR_ASSIGN (279)
    TYPEDEF (280)
    EXTERN (281)
    STATIC (282)
    AUTO (283)
    REGISTER (284)
    CONST (285)
    VOLATILE (286)
    STRUCT (287)
    UNION (288)
    ENUM (289)
    ELLIPSIS (290)
    CASE (291)
    DEFAULT (292)
    IF (293)
    ELSE (294)
    SWITCH (295)
    WHILE (296)
    DO (297)
    FOR (298)
    GOTO (299)
    CONTINUE (300)
    BREAK (301)
    IDENTIFIER <string> (302) 23 35
    CONSTANT <string> (303) 36
    STRING_LITERAL <string> (304) 37
    CHAR <string> (305) 13
    SHORT <string> (306) 14
    INT <string> (307) 15
    LONG <string> (308) 16
    SIGNED <string> (309) 19
    UNSIGNED <string> (310) 20
    FLOAT <string> (311) 17
    DOUBLE <string> (312) 18
    VOID <string> (313) 12
    TYPE_NAME <string> (314) 21
    RETURN (315) 33


Nonterminals, with rules where they appear

    $accept (67)
        on left: 0
    ROOT (68)
        on left: 1
        on right: 0
    translation_unit <block> (69)
        on left: 2 3
        on right: 1
    external_declaration <block> (70)
        on left: 4
        on right: 2
    declaration <block> (71)
        on left: 5
        on right: 3 28
    init_declarator <block> (72)
        on left: 6 7
        on right: 5
    function_definition <block> (73)
        on left: 8 9 10
        on right: 4
    declaration_specifiers <string> (74)
        on left: 11
        on right: 5 8
    type_specifier <string> (75)
        on left: 12 13 14 15 16 17 18 19 20 21
        on right: 11
    declarator <block> (76)
        on left: 22
        on right: 6 7 8 24
    direct_declarator <block> (77)
        on left: 23 24 25
        on right: 22 25
    compound_statement <block> (78)
        on left: 26 27 28
        on right: 8 32
    statement_list <block> (79)
        on left: 29 30
        on right: 27 28 30
    statement <block> (80)
        on left: 31 32
        on right: 29 30
    jump_statement <block> (81)
        on left: 33
        on right: 10 31
    expression <block> (82)
        on left: 34
        on right: 9 33 38
    primary_expression <block> (83)
        on left: 35 36 37 38
        on right: 7 34


State 0

    0 $accept: . ROOT $end

    IDENTIFIER      shift, and go to state 1
    CONSTANT        shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    CHAR            shift, and go to state 4
    SHORT           shift, and go to state 5
    INT             shift, and go to state 6
    LONG            shift, and go to state 7
    SIGNED          shift, and go to state 8
    UNSIGNED        shift, and go to state 9
    FLOAT           shift, and go to state 10
    DOUBLE          shift, and go to state 11
    VOID            shift, and go to state 12
    TYPE_NAME       shift, and go to state 13
    RETURN          shift, and go to state 14
    '('             shift, and go to state 15

    ROOT                    go to state 16
    translation_unit        go to state 17
    external_declaration    go to state 18
    declaration             go to state 19
    function_definition     go to state 20
    declaration_specifiers  go to state 21
    type_specifier          go to state 22
    jump_statement          go to state 23
    expression              go to state 24
    primary_expression      go to state 25


State 1

   35 primary_expression: IDENTIFIER .

    $default  reduce using rule 35 (primary_expression)


State 2

   36 primary_expression: CONSTANT .

    $default  reduce using rule 36 (primary_expression)


State 3

   37 primary_expression: STRING_LITERAL .

    $default  reduce using rule 37 (primary_expression)


State 4

   13 type_specifier: CHAR .

    $default  reduce using rule 13 (type_specifier)


State 5

   14 type_specifier: SHORT .

    $default  reduce using rule 14 (type_specifier)


State 6

   15 type_specifier: INT .

    $default  reduce using rule 15 (type_specifier)


State 7

   16 type_specifier: LONG .

    $default  reduce using rule 16 (type_specifier)


State 8

   19 type_specifier: SIGNED .

    $default  reduce using rule 19 (type_specifier)


State 9

   20 type_specifier: UNSIGNED .

    $default  reduce using rule 20 (type_specifier)


State 10

   17 type_specifier: FLOAT .

    $default  reduce using rule 17 (type_specifier)


State 11

   18 type_specifier: DOUBLE .

    $default  reduce using rule 18 (type_specifier)


State 12

   12 type_specifier: VOID .

    $default  reduce using rule 12 (type_specifier)


State 13

   21 type_specifier: TYPE_NAME .

    $default  reduce using rule 21 (type_specifier)


State 14

   33 jump_statement: RETURN . expression ';'

    IDENTIFIER      shift, and go to state 1
    CONSTANT        shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    '('             shift, and go to state 15

    expression          go to state 26
    primary_expression  go to state 25


State 15

   38 primary_expression: '(' . expression ')'

    IDENTIFIER      shift, and go to state 1
    CONSTANT        shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    '('             shift, and go to state 15

    expression          go to state 27
    primary_expression  go to state 25


State 16

    0 $accept: ROOT . $end

    $end  shift, and go to state 28


State 17

    1 ROOT: translation_unit .

    $default  reduce using rule 1 (ROOT)


State 18

    2 translation_unit: external_declaration .

    $default  reduce using rule 2 (translation_unit)


State 19

    3 translation_unit: declaration .

    $default  reduce using rule 3 (translation_unit)


State 20

    4 external_declaration: function_definition .

    $default  reduce using rule 4 (external_declaration)


State 21

    5 declaration: declaration_specifiers . init_declarator ';'
    8 function_definition: declaration_specifiers . declarator compound_statement

    IDENTIFIER  shift, and go to state 29
    '('         shift, and go to state 30

    init_declarator    go to state 31
    declarator         go to state 32
    direct_declarator  go to state 33


State 22

   11 declaration_specifiers: type_specifier .

    $default  reduce using rule 11 (declaration_specifiers)


State 23

   10 function_definition: jump_statement .

    $default  reduce using rule 10 (function_definition)


State 24

    9 function_definition: expression . ';'

    ';'  shift, and go to state 34


State 25

   34 expression: primary_expression .

    $default  reduce using rule 34 (expression)


State 26

   33 jump_statement: RETURN expression . ';'

    ';'  shift, and go to state 35


State 27

   38 primary_expression: '(' expression . ')'

    ')'  shift, and go to state 36


State 28

    0 $accept: ROOT $end .

    $default  accept


State 29

   23 direct_declarator: IDENTIFIER .

    $default  reduce using rule 23 (direct_declarator)


State 30

   24 direct_declarator: '(' . declarator ')'

    IDENTIFIER  shift, and go to state 29
    '('         shift, and go to state 30

    declarator         go to state 37
    direct_declarator  go to state 33


State 31

    5 declaration: declaration_specifiers init_declarator . ';'

    ';'  shift, and go to state 38


State 32

    6 init_declarator: declarator .
    7                | declarator . '=' primary_expression
    8 function_definition: declaration_specifiers declarator . compound_statement

    '='  shift, and go to state 39
    '{'  shift, and go to state 40

    $default  reduce using rule 6 (init_declarator)

    compound_statement  go to state 41


State 33

   22 declarator: direct_declarator .
   25 direct_declarator: direct_declarator . '(' ')'

    '('  shift, and go to state 42

    $default  reduce using rule 22 (declarator)


State 34

    9 function_definition: expression ';' .

    $default  reduce using rule 9 (function_definition)


State 35

   33 jump_statement: RETURN expression ';' .

    $default  reduce using rule 33 (jump_statement)


State 36

   38 primary_expression: '(' expression ')' .

    $default  reduce using rule 38 (primary_expression)


State 37

   24 direct_declarator: '(' declarator . ')'

    ')'  shift, and go to state 43


State 38

    5 declaration: declaration_specifiers init_declarator ';' .

    $default  reduce using rule 5 (declaration)


State 39

    7 init_declarator: declarator '=' . primary_expression

    IDENTIFIER      shift, and go to state 1
    CONSTANT        shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    '('             shift, and go to state 15

    primary_expression  go to state 44


State 40

   26 compound_statement: '{' . '}'
   27                   | '{' . statement_list '}'
   28                   | '{' . declaration statement_list '}'

    CHAR       shift, and go to state 4
    SHORT      shift, and go to state 5
    INT        shift, and go to state 6
    LONG       shift, and go to state 7
    SIGNED     shift, and go to state 8
    UNSIGNED   shift, and go to state 9
    FLOAT      shift, and go to state 10
    DOUBLE     shift, and go to state 11
    VOID       shift, and go to state 12
    TYPE_NAME  shift, and go to state 13
    RETURN     shift, and go to state 14
    '{'        shift, and go to state 40
    '}'        shift, and go to state 45

    declaration             go to state 46
    declaration_specifiers  go to state 47
    type_specifier          go to state 22
    compound_statement      go to state 48
    statement_list          go to state 49
    statement               go to state 50
    jump_statement          go to state 51


State 41

    8 function_definition: declaration_specifiers declarator compound_statement .

    $default  reduce using rule 8 (function_definition)


State 42

   25 direct_declarator: direct_declarator '(' . ')'

    ')'  shift, and go to state 52


State 43

   24 direct_declarator: '(' declarator ')' .

    $default  reduce using rule 24 (direct_declarator)


State 44

    7 init_declarator: declarator '=' primary_expression .

    $default  reduce using rule 7 (init_declarator)


State 45

   26 compound_statement: '{' '}' .

    $default  reduce using rule 26 (compound_statement)


State 46

   28 compound_statement: '{' declaration . statement_list '}'

    RETURN  shift, and go to state 14
    '{'     shift, and go to state 40

    compound_statement  go to state 48
    statement_list      go to state 53
    statement           go to state 50
    jump_statement      go to state 51


State 47

    5 declaration: declaration_specifiers . init_declarator ';'

    IDENTIFIER  shift, and go to state 29
    '('         shift, and go to state 30

    init_declarator    go to state 31
    declarator         go to state 54
    direct_declarator  go to state 33


State 48

   32 statement: compound_statement .

    $default  reduce using rule 32 (statement)


State 49

   27 compound_statement: '{' statement_list . '}'
   30 statement_list: statement_list . statement

    RETURN  shift, and go to state 14
    '{'     shift, and go to state 40
    '}'     shift, and go to state 55

    compound_statement  go to state 48
    statement           go to state 56
    jump_statement      go to state 51


State 50

   29 statement_list: statement .

    $default  reduce using rule 29 (statement_list)


State 51

   31 statement: jump_statement .

    $default  reduce using rule 31 (statement)


State 52

   25 direct_declarator: direct_declarator '(' ')' .

    $default  reduce using rule 25 (direct_declarator)


State 53

   28 compound_statement: '{' declaration statement_list . '}'
   30 statement_list: statement_list . statement

    RETURN  shift, and go to state 14
    '{'     shift, and go to state 40
    '}'     shift, and go to state 57

    compound_statement  go to state 48
    statement           go to state 56
    jump_statement      go to state 51


State 54

    6 init_declarator: declarator .
    7                | declarator . '=' primary_expression

    '='  shift, and go to state 39

    $default  reduce using rule 6 (init_declarator)


State 55

   27 compound_statement: '{' statement_list '}' .

    $default  reduce using rule 27 (compound_statement)


State 56

   30 statement_list: statement_list statement .

    $default  reduce using rule 30 (statement_list)


State 57

   28 compound_statement: '{' declaration statement_list '}' .

    $default  reduce using rule 28 (compound_statement)
