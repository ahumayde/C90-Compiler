Grammar

    0 $accept: ROOT $end

    1 ROOT: translation_unit

    2 translation_unit: external_declaration

    3 external_declaration: function_definition

    4 function_definition: declaration_specifiers declarator compound_statement

    5 declaration_specifiers: type_specifier
    6                       | type_qualifier

    7 type_specifier: VOID
    8               | CHAR
    9               | SHORT
   10               | INT
   11               | LONG
   12               | FLOAT
   13               | DOUBLE
   14               | SIGNED
   15               | UNSIGNED
   16               | TYPE_NAME

   17 type_qualifier: CONST
   18               | VOLATILE

   19 declarator: direct_declarator

   20 direct_declarator: IDENTIFIER
   21                  | '(' declarator ')'
   22                  | direct_declarator '(' ')'

   23 compound_statement: '{' '}'
   24                   | '{' statement '}'

   25 statement: jump_statement

   26 jump_statement: RETURN expression ';'

   27 expression: primary_expression

   28 primary_expression: IDENTIFIER
   29                   | CONSTANT
   30                   | STRING_LITERAL
   31                   | '(' expression ')'


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 21 22 31
    ')' (41) 21 22 31
    ';' (59) 26
    '{' (123) 23 24
    '}' (125) 23 24
    error (256)
    IDENTIFIER (258) 20 28
    CONSTANT (259) 29
    STRING_LITERAL (260) 30
    TYPE_NAME (261) 16
    CHAR (262) 8
    SHORT (263) 9
    INT (264) 10
    LONG (265) 11
    SIGNED (266) 14
    UNSIGNED (267) 15
    FLOAT (268) 12
    DOUBLE (269) 13
    CONST (270) 17
    VOLATILE (271) 18
    VOID (272) 7
    RETURN (273) 26


Nonterminals, with rules where they appear

    $accept (24)
        on left: 0
    ROOT (25)
        on left: 1
        on right: 0
    translation_unit <block> (26)
        on left: 2
        on right: 1
    external_declaration <block> (27)
        on left: 3
        on right: 2
    function_definition <block> (28)
        on left: 4
        on right: 3
    declaration_specifiers <block> (29)
        on left: 5 6
        on right: 4
    type_specifier <block> (30)
        on left: 7 8 9 10 11 12 13 14 15 16
        on right: 5
    type_qualifier <block> (31)
        on left: 17 18
        on right: 6
    declarator <block> (32)
        on left: 19
        on right: 4 21
    direct_declarator <block> (33)
        on left: 20 21 22
        on right: 19 22
    compound_statement <block> (34)
        on left: 23 24
        on right: 4
    statement <block> (35)
        on left: 25
        on right: 24
    jump_statement <block> (36)
        on left: 26
        on right: 25
    expression <block> (37)
        on left: 27
        on right: 26 31
    primary_expression <block> (38)
        on left: 28 29 30 31
        on right: 27


State 0

    0 $accept: . ROOT $end

    TYPE_NAME  shift, and go to state 1
    CHAR       shift, and go to state 2
    SHORT      shift, and go to state 3
    INT        shift, and go to state 4
    LONG       shift, and go to state 5
    SIGNED     shift, and go to state 6
    UNSIGNED   shift, and go to state 7
    FLOAT      shift, and go to state 8
    DOUBLE     shift, and go to state 9
    CONST      shift, and go to state 10
    VOLATILE   shift, and go to state 11
    VOID       shift, and go to state 12

    ROOT                    go to state 13
    translation_unit        go to state 14
    external_declaration    go to state 15
    function_definition     go to state 16
    declaration_specifiers  go to state 17
    type_specifier          go to state 18
    type_qualifier          go to state 19


State 1

   16 type_specifier: TYPE_NAME .

    $default  reduce using rule 16 (type_specifier)


State 2

    8 type_specifier: CHAR .

    $default  reduce using rule 8 (type_specifier)


State 3

    9 type_specifier: SHORT .

    $default  reduce using rule 9 (type_specifier)


State 4

   10 type_specifier: INT .

    $default  reduce using rule 10 (type_specifier)


State 5

   11 type_specifier: LONG .

    $default  reduce using rule 11 (type_specifier)


State 6

   14 type_specifier: SIGNED .

    $default  reduce using rule 14 (type_specifier)


State 7

   15 type_specifier: UNSIGNED .

    $default  reduce using rule 15 (type_specifier)


State 8

   12 type_specifier: FLOAT .

    $default  reduce using rule 12 (type_specifier)


State 9

   13 type_specifier: DOUBLE .

    $default  reduce using rule 13 (type_specifier)


State 10

   17 type_qualifier: CONST .

    $default  reduce using rule 17 (type_qualifier)


State 11

   18 type_qualifier: VOLATILE .

    $default  reduce using rule 18 (type_qualifier)


State 12

    7 type_specifier: VOID .

    $default  reduce using rule 7 (type_specifier)


State 13

    0 $accept: ROOT . $end

    $end  shift, and go to state 20


State 14

    1 ROOT: translation_unit .

    $default  reduce using rule 1 (ROOT)


State 15

    2 translation_unit: external_declaration .

    $default  reduce using rule 2 (translation_unit)


State 16

    3 external_declaration: function_definition .

    $default  reduce using rule 3 (external_declaration)


State 17

    4 function_definition: declaration_specifiers . declarator compound_statement

    IDENTIFIER  shift, and go to state 21
    '('         shift, and go to state 22

    declarator         go to state 23
    direct_declarator  go to state 24


State 18

    5 declaration_specifiers: type_specifier .

    $default  reduce using rule 5 (declaration_specifiers)


State 19

    6 declaration_specifiers: type_qualifier .

    $default  reduce using rule 6 (declaration_specifiers)


State 20

    0 $accept: ROOT $end .

    $default  accept


State 21

   20 direct_declarator: IDENTIFIER .

    $default  reduce using rule 20 (direct_declarator)


State 22

   21 direct_declarator: '(' . declarator ')'

    IDENTIFIER  shift, and go to state 21
    '('         shift, and go to state 22

    declarator         go to state 25
    direct_declarator  go to state 24


State 23

    4 function_definition: declaration_specifiers declarator . compound_statement

    '{'  shift, and go to state 26

    compound_statement  go to state 27


State 24

   19 declarator: direct_declarator .
   22 direct_declarator: direct_declarator . '(' ')'

    '('  shift, and go to state 28

    $default  reduce using rule 19 (declarator)


State 25

   21 direct_declarator: '(' declarator . ')'

    ')'  shift, and go to state 29


State 26

   23 compound_statement: '{' . '}'
   24                   | '{' . statement '}'

    RETURN  shift, and go to state 30
    '}'     shift, and go to state 31

    statement       go to state 32
    jump_statement  go to state 33


State 27

    4 function_definition: declaration_specifiers declarator compound_statement .

    $default  reduce using rule 4 (function_definition)


State 28

   22 direct_declarator: direct_declarator '(' . ')'

    ')'  shift, and go to state 34


State 29

   21 direct_declarator: '(' declarator ')' .

    $default  reduce using rule 21 (direct_declarator)


State 30

   26 jump_statement: RETURN . expression ';'

    IDENTIFIER      shift, and go to state 35
    CONSTANT        shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    '('             shift, and go to state 38

    expression          go to state 39
    primary_expression  go to state 40


State 31

   23 compound_statement: '{' '}' .

    $default  reduce using rule 23 (compound_statement)


State 32

   24 compound_statement: '{' statement . '}'

    '}'  shift, and go to state 41


State 33

   25 statement: jump_statement .

    $default  reduce using rule 25 (statement)


State 34

   22 direct_declarator: direct_declarator '(' ')' .

    $default  reduce using rule 22 (direct_declarator)


State 35

   28 primary_expression: IDENTIFIER .

    $default  reduce using rule 28 (primary_expression)


State 36

   29 primary_expression: CONSTANT .

    $default  reduce using rule 29 (primary_expression)


State 37

   30 primary_expression: STRING_LITERAL .

    $default  reduce using rule 30 (primary_expression)


State 38

   31 primary_expression: '(' . expression ')'

    IDENTIFIER      shift, and go to state 35
    CONSTANT        shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    '('             shift, and go to state 38

    expression          go to state 42
    primary_expression  go to state 40


State 39

   26 jump_statement: RETURN expression . ';'

    ';'  shift, and go to state 43


State 40

   27 expression: primary_expression .

    $default  reduce using rule 27 (expression)


State 41

   24 compound_statement: '{' statement '}' .

    $default  reduce using rule 24 (compound_statement)


State 42

   31 primary_expression: '(' expression . ')'

    ')'  shift, and go to state 44


State 43

   26 jump_statement: RETURN expression ';' .

    $default  reduce using rule 26 (jump_statement)


State 44

   31 primary_expression: '(' expression ')' .

    $default  reduce using rule 31 (primary_expression)
