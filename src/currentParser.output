Grammar

    0 $accept: ROOT $end

    1 ROOT: translation_unit

    2 translation_unit: external_declaration

    3 external_declaration: function_definition

    4 function_definition: declaration_specifiers declarator compound_statement

    5 declaration_specifiers: type_specifier

    6 type_specifier: VOID
    7               | CHAR
    8               | SHORT
    9               | INT
   10               | LONG
   11               | FLOAT
   12               | DOUBLE
   13               | SIGNED
   14               | UNSIGNED
   15               | TYPE_NAME

   16 declarator: direct_declarator

   17 direct_declarator: IDENTIFIER
   18                  | '(' declarator ')'
   19                  | direct_declarator '(' ')'

   20 compound_statement: '{' '}'
   21                   | '{' statement '}'

   22 statement: jump_statement

   23 jump_statement: RETURN expression ';'

   24 expression: primary_expression

   25 primary_expression: IDENTIFIER
   26                   | CONSTANT
   27                   | STRING_LITERAL
   28                   | '(' expression ')'


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 18 19 28
    ')' (41) 18 19 28
    ';' (59) 23
    '{' (123) 20 21
    '}' (125) 20 21
    error (256)
    IDENTIFIER <string> (258) 17 25
    CONSTANT <string> (259) 26
    STRING_LITERAL <string> (260) 27
    CHAR <string> (261) 7
    SHORT <string> (262) 8
    INT <string> (263) 9
    LONG <string> (264) 10
    SIGNED <string> (265) 13
    UNSIGNED <string> (266) 14
    FLOAT <string> (267) 11
    DOUBLE <string> (268) 12
    VOID <string> (269) 6
    TYPE_NAME <string> (270) 15
    RETURN (271) 23


Nonterminals, with rules where they appear

    $accept (22)
        on left: 0
    ROOT (23)
        on left: 1
        on right: 0
    translation_unit <block> (24)
        on left: 2
        on right: 1
    external_declaration <block> (25)
        on left: 3
        on right: 2
    function_definition <block> (26)
        on left: 4
        on right: 3
    declaration_specifiers <string> (27)
        on left: 5
        on right: 4
    type_specifier <string> (28)
        on left: 6 7 8 9 10 11 12 13 14 15
        on right: 5
    declarator <block> (29)
        on left: 16
        on right: 4 18
    direct_declarator <block> (30)
        on left: 17 18 19
        on right: 16 19
    compound_statement <block> (31)
        on left: 20 21
        on right: 4
    statement <block> (32)
        on left: 22
        on right: 21
    jump_statement <block> (33)
        on left: 23
        on right: 22
    expression <block> (34)
        on left: 24
        on right: 23 28
    primary_expression <block> (35)
        on left: 25 26 27 28
        on right: 24


State 0

    0 $accept: • ROOT $end

    CHAR       shift, and go to state 1
    SHORT      shift, and go to state 2
    INT        shift, and go to state 3
    LONG       shift, and go to state 4
    SIGNED     shift, and go to state 5
    UNSIGNED   shift, and go to state 6
    FLOAT      shift, and go to state 7
    DOUBLE     shift, and go to state 8
    VOID       shift, and go to state 9
    TYPE_NAME  shift, and go to state 10

    ROOT                    go to state 11
    translation_unit        go to state 12
    external_declaration    go to state 13
    function_definition     go to state 14
    declaration_specifiers  go to state 15
    type_specifier          go to state 16


State 1

    7 type_specifier: CHAR •

    $default  reduce using rule 7 (type_specifier)


State 2

    8 type_specifier: SHORT •

    $default  reduce using rule 8 (type_specifier)


State 3

    9 type_specifier: INT •

    $default  reduce using rule 9 (type_specifier)


State 4

   10 type_specifier: LONG •

    $default  reduce using rule 10 (type_specifier)


State 5

   13 type_specifier: SIGNED •

    $default  reduce using rule 13 (type_specifier)


State 6

   14 type_specifier: UNSIGNED •

    $default  reduce using rule 14 (type_specifier)


State 7

   11 type_specifier: FLOAT •

    $default  reduce using rule 11 (type_specifier)


State 8

   12 type_specifier: DOUBLE •

    $default  reduce using rule 12 (type_specifier)


State 9

    6 type_specifier: VOID •

    $default  reduce using rule 6 (type_specifier)


State 10

   15 type_specifier: TYPE_NAME •

    $default  reduce using rule 15 (type_specifier)


State 11

    0 $accept: ROOT • $end

    $end  shift, and go to state 17


State 12

    1 ROOT: translation_unit •

    $default  reduce using rule 1 (ROOT)


State 13

    2 translation_unit: external_declaration •

    $default  reduce using rule 2 (translation_unit)


State 14

    3 external_declaration: function_definition •

    $default  reduce using rule 3 (external_declaration)


State 15

    4 function_definition: declaration_specifiers • declarator compound_statement

    IDENTIFIER  shift, and go to state 18
    '('         shift, and go to state 19

    declarator         go to state 20
    direct_declarator  go to state 21


State 16

    5 declaration_specifiers: type_specifier •

    $default  reduce using rule 5 (declaration_specifiers)


State 17

    0 $accept: ROOT $end •

    $default  accept


State 18

   17 direct_declarator: IDENTIFIER •

    $default  reduce using rule 17 (direct_declarator)


State 19

   18 direct_declarator: '(' • declarator ')'

    IDENTIFIER  shift, and go to state 18
    '('         shift, and go to state 19

    declarator         go to state 22
    direct_declarator  go to state 21


State 20

    4 function_definition: declaration_specifiers declarator • compound_statement

    '{'  shift, and go to state 23

    compound_statement  go to state 24


State 21

   16 declarator: direct_declarator •
   19 direct_declarator: direct_declarator • '(' ')'

    '('  shift, and go to state 25

    $default  reduce using rule 16 (declarator)


State 22

   18 direct_declarator: '(' declarator • ')'

    ')'  shift, and go to state 26


State 23

   20 compound_statement: '{' • '}'
   21                   | '{' • statement '}'

    RETURN  shift, and go to state 27
    '}'     shift, and go to state 28

    statement       go to state 29
    jump_statement  go to state 30


State 24

    4 function_definition: declaration_specifiers declarator compound_statement •

    $default  reduce using rule 4 (function_definition)


State 25

   19 direct_declarator: direct_declarator '(' • ')'

    ')'  shift, and go to state 31


State 26

   18 direct_declarator: '(' declarator ')' •

    $default  reduce using rule 18 (direct_declarator)


State 27

   23 jump_statement: RETURN • expression ';'

    IDENTIFIER      shift, and go to state 32
    CONSTANT        shift, and go to state 33
    STRING_LITERAL  shift, and go to state 34
    '('             shift, and go to state 35

    expression          go to state 36
    primary_expression  go to state 37


State 28

   20 compound_statement: '{' '}' •

    $default  reduce using rule 20 (compound_statement)


State 29

   21 compound_statement: '{' statement • '}'

    '}'  shift, and go to state 38


State 30

   22 statement: jump_statement •

    $default  reduce using rule 22 (statement)


State 31

   19 direct_declarator: direct_declarator '(' ')' •

    $default  reduce using rule 19 (direct_declarator)


State 32

   25 primary_expression: IDENTIFIER •

    $default  reduce using rule 25 (primary_expression)


State 33

   26 primary_expression: CONSTANT •

    $default  reduce using rule 26 (primary_expression)


State 34

   27 primary_expression: STRING_LITERAL •

    $default  reduce using rule 27 (primary_expression)


State 35

   28 primary_expression: '(' • expression ')'

    IDENTIFIER      shift, and go to state 32
    CONSTANT        shift, and go to state 33
    STRING_LITERAL  shift, and go to state 34
    '('             shift, and go to state 35

    expression          go to state 39
    primary_expression  go to state 37


State 36

   23 jump_statement: RETURN expression • ';'

    ';'  shift, and go to state 40


State 37

   24 expression: primary_expression •

    $default  reduce using rule 24 (expression)


State 38

   21 compound_statement: '{' statement '}' •

    $default  reduce using rule 21 (compound_statement)


State 39

   28 primary_expression: '(' expression • ')'

    ')'  shift, and go to state 41


State 40

   23 jump_statement: RETURN expression ';' •

    $default  reduce using rule 23 (jump_statement)


State 41

   28 primary_expression: '(' expression ')' •

    $default  reduce using rule 28 (primary_expression)
