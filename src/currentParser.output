Terminals unused in grammar

    SIZEOF
    PTR_OP
    INC_OP
    DEC_OP
    LEFT_OP
    RIGHT_OP
    LE_OP
    GE_OP
    EQ_OP
    NE_OP
    AND_OP
    OR_OP
    MUL_ASSIGN
    DIV_ASSIGN
    MOD_ASSIGN
    ADD_ASSIGN
    SUB_ASSIGN
    LEFT_ASSIGN
    RIGHT_ASSIGN
    AND_ASSIGN
    XOR_ASSIGN
    OR_ASSIGN
    TYPEDEF
    EXTERN
    STATIC
    AUTO
    REGISTER
    CONST
    VOLATILE
    STRUCT
    UNION
    ENUM
    ELLIPSIS
    CASE
    DEFAULT
    IF
    ELSE
    SWITCH
    WHILE
    DO
    FOR
    GOTO
    CONTINUE
    BREAK


Grammar

    0 $accept: ROOT $end

    1 ROOT: translation_unit

    2 translation_unit: external_declaration

    3 external_declaration: function_definition

    4 function_definition: declaration_specifiers declarator compound_statement
    5                    | expression ';'
    6                    | jump_statement

    7 declaration_specifiers: type_specifier

    8 type_specifier: VOID
    9               | CHAR
   10               | SHORT
   11               | INT
   12               | LONG
   13               | FLOAT
   14               | DOUBLE
   15               | SIGNED
   16               | UNSIGNED
   17               | TYPE_NAME

   18 declarator: direct_declarator

   19 direct_declarator: IDENTIFIER
   20                  | '(' declarator ')'
   21                  | direct_declarator '(' ')'

   22 compound_statement: '{' '}'
   23                   | '{' statement_list '}'

   24 statement_list: statement
   25               | statement_list statement

   26 statement: jump_statement

   27 jump_statement: RETURN expression ';'

   28 expression: primary_expression

   29 primary_expression: IDENTIFIER
   30                   | CONSTANT
   31                   | STRING_LITERAL
   32                   | '(' expression ')'


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 20 21 32
    ')' (41) 20 21 32
    ';' (59) 5 27
    '{' (123) 22 23
    '}' (125) 22 23
    error (256)
    SIZEOF (258)
    PTR_OP (259)
    INC_OP (260)
    DEC_OP (261)
    LEFT_OP (262)
    RIGHT_OP (263)
    LE_OP (264)
    GE_OP (265)
    EQ_OP (266)
    NE_OP (267)
    AND_OP (268)
    OR_OP (269)
    MUL_ASSIGN (270)
    DIV_ASSIGN (271)
    MOD_ASSIGN (272)
    ADD_ASSIGN (273)
    SUB_ASSIGN (274)
    LEFT_ASSIGN (275)
    RIGHT_ASSIGN (276)
    AND_ASSIGN (277)
    XOR_ASSIGN (278)
    OR_ASSIGN (279)
    TYPEDEF (280)
    EXTERN (281)
    STATIC (282)
    AUTO (283)
    REGISTER (284)
    CONST (285)
    VOLATILE (286)
    STRUCT (287)
    UNION (288)
    ENUM (289)
    ELLIPSIS (290)
    CASE (291)
    DEFAULT (292)
    IF (293)
    ELSE (294)
    SWITCH (295)
    WHILE (296)
    DO (297)
    FOR (298)
    GOTO (299)
    CONTINUE (300)
    BREAK (301)
    IDENTIFIER <string> (302) 19 29
    CONSTANT <string> (303) 30
    STRING_LITERAL <string> (304) 31
    CHAR <string> (305) 9
    SHORT <string> (306) 10
    INT <string> (307) 11
    LONG <string> (308) 12
    SIGNED <string> (309) 15
    UNSIGNED <string> (310) 16
    FLOAT <string> (311) 13
    DOUBLE <string> (312) 14
    VOID <string> (313) 8
    TYPE_NAME <string> (314) 17
    RETURN (315) 27


Nonterminals, with rules where they appear

    $accept (66)
        on left: 0
    ROOT (67)
        on left: 1
        on right: 0
    translation_unit <block> (68)
        on left: 2
        on right: 1
    external_declaration <block> (69)
        on left: 3
        on right: 2
    function_definition <block> (70)
        on left: 4 5 6
        on right: 3
    declaration_specifiers <string> (71)
        on left: 7
        on right: 4
    type_specifier <string> (72)
        on left: 8 9 10 11 12 13 14 15 16 17
        on right: 7
    declarator <block> (73)
        on left: 18
        on right: 4 20
    direct_declarator <block> (74)
        on left: 19 20 21
        on right: 18 21
    compound_statement <block> (75)
        on left: 22 23
        on right: 4
    statement_list <block> (76)
        on left: 24 25
        on right: 23 25
    statement <block> (77)
        on left: 26
        on right: 24 25
    jump_statement <block> (78)
        on left: 27
        on right: 6 26
    expression <block> (79)
        on left: 28
        on right: 5 27 32
    primary_expression <block> (80)
        on left: 29 30 31 32
        on right: 28


State 0

    0 $accept: . ROOT $end

    IDENTIFIER      shift, and go to state 1
    CONSTANT        shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    CHAR            shift, and go to state 4
    SHORT           shift, and go to state 5
    INT             shift, and go to state 6
    LONG            shift, and go to state 7
    SIGNED          shift, and go to state 8
    UNSIGNED        shift, and go to state 9
    FLOAT           shift, and go to state 10
    DOUBLE          shift, and go to state 11
    VOID            shift, and go to state 12
    TYPE_NAME       shift, and go to state 13
    RETURN          shift, and go to state 14
    '('             shift, and go to state 15

    ROOT                    go to state 16
    translation_unit        go to state 17
    external_declaration    go to state 18
    function_definition     go to state 19
    declaration_specifiers  go to state 20
    type_specifier          go to state 21
    jump_statement          go to state 22
    expression              go to state 23
    primary_expression      go to state 24


State 1

   29 primary_expression: IDENTIFIER .

    $default  reduce using rule 29 (primary_expression)


State 2

   30 primary_expression: CONSTANT .

    $default  reduce using rule 30 (primary_expression)


State 3

   31 primary_expression: STRING_LITERAL .

    $default  reduce using rule 31 (primary_expression)


State 4

    9 type_specifier: CHAR .

    $default  reduce using rule 9 (type_specifier)


State 5

   10 type_specifier: SHORT .

    $default  reduce using rule 10 (type_specifier)


State 6

   11 type_specifier: INT .

    $default  reduce using rule 11 (type_specifier)


State 7

   12 type_specifier: LONG .

    $default  reduce using rule 12 (type_specifier)


State 8

   15 type_specifier: SIGNED .

    $default  reduce using rule 15 (type_specifier)


State 9

   16 type_specifier: UNSIGNED .

    $default  reduce using rule 16 (type_specifier)


State 10

   13 type_specifier: FLOAT .

    $default  reduce using rule 13 (type_specifier)


State 11

   14 type_specifier: DOUBLE .

    $default  reduce using rule 14 (type_specifier)


State 12

    8 type_specifier: VOID .

    $default  reduce using rule 8 (type_specifier)


State 13

   17 type_specifier: TYPE_NAME .

    $default  reduce using rule 17 (type_specifier)


State 14

   27 jump_statement: RETURN . expression ';'

    IDENTIFIER      shift, and go to state 1
    CONSTANT        shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    '('             shift, and go to state 15

    expression          go to state 25
    primary_expression  go to state 24


State 15

   32 primary_expression: '(' . expression ')'

    IDENTIFIER      shift, and go to state 1
    CONSTANT        shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    '('             shift, and go to state 15

    expression          go to state 26
    primary_expression  go to state 24


State 16

    0 $accept: ROOT . $end

    $end  shift, and go to state 27


State 17

    1 ROOT: translation_unit .

    $default  reduce using rule 1 (ROOT)


State 18

    2 translation_unit: external_declaration .

    $default  reduce using rule 2 (translation_unit)


State 19

    3 external_declaration: function_definition .

    $default  reduce using rule 3 (external_declaration)


State 20

    4 function_definition: declaration_specifiers . declarator compound_statement

    IDENTIFIER  shift, and go to state 28
    '('         shift, and go to state 29

    declarator         go to state 30
    direct_declarator  go to state 31


State 21

    7 declaration_specifiers: type_specifier .

    $default  reduce using rule 7 (declaration_specifiers)


State 22

    6 function_definition: jump_statement .

    $default  reduce using rule 6 (function_definition)


State 23

    5 function_definition: expression . ';'

    ';'  shift, and go to state 32


State 24

   28 expression: primary_expression .

    $default  reduce using rule 28 (expression)


State 25

   27 jump_statement: RETURN expression . ';'

    ';'  shift, and go to state 33


State 26

   32 primary_expression: '(' expression . ')'

    ')'  shift, and go to state 34


State 27

    0 $accept: ROOT $end .

    $default  accept


State 28

   19 direct_declarator: IDENTIFIER .

    $default  reduce using rule 19 (direct_declarator)


State 29

   20 direct_declarator: '(' . declarator ')'

    IDENTIFIER  shift, and go to state 28
    '('         shift, and go to state 29

    declarator         go to state 35
    direct_declarator  go to state 31


State 30

    4 function_definition: declaration_specifiers declarator . compound_statement

    '{'  shift, and go to state 36

    compound_statement  go to state 37


State 31

   18 declarator: direct_declarator .
   21 direct_declarator: direct_declarator . '(' ')'

    '('  shift, and go to state 38

    $default  reduce using rule 18 (declarator)


State 32

    5 function_definition: expression ';' .

    $default  reduce using rule 5 (function_definition)


State 33

   27 jump_statement: RETURN expression ';' .

    $default  reduce using rule 27 (jump_statement)


State 34

   32 primary_expression: '(' expression ')' .

    $default  reduce using rule 32 (primary_expression)


State 35

   20 direct_declarator: '(' declarator . ')'

    ')'  shift, and go to state 39


State 36

   22 compound_statement: '{' . '}'
   23                   | '{' . statement_list '}'

    RETURN  shift, and go to state 14
    '}'     shift, and go to state 40

    statement_list  go to state 41
    statement       go to state 42
    jump_statement  go to state 43


State 37

    4 function_definition: declaration_specifiers declarator compound_statement .

    $default  reduce using rule 4 (function_definition)


State 38

   21 direct_declarator: direct_declarator '(' . ')'

    ')'  shift, and go to state 44


State 39

   20 direct_declarator: '(' declarator ')' .

    $default  reduce using rule 20 (direct_declarator)


State 40

   22 compound_statement: '{' '}' .

    $default  reduce using rule 22 (compound_statement)


State 41

   23 compound_statement: '{' statement_list . '}'
   25 statement_list: statement_list . statement

    RETURN  shift, and go to state 14
    '}'     shift, and go to state 45

    statement       go to state 46
    jump_statement  go to state 43


State 42

   24 statement_list: statement .

    $default  reduce using rule 24 (statement_list)


State 43

   26 statement: jump_statement .

    $default  reduce using rule 26 (statement)


State 44

   21 direct_declarator: direct_declarator '(' ')' .

    $default  reduce using rule 21 (direct_declarator)


State 45

   23 compound_statement: '{' statement_list '}' .

    $default  reduce using rule 23 (compound_statement)


State 46

   25 statement_list: statement_list statement .

    $default  reduce using rule 25 (statement_list)
